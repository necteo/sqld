관계형 데이터베이스
    1. DBMS의 발전 과정 : DBMS => 1960~현재까지 지속적으로 발전하며 데이터 저장 및 관리의 핵심 기술로 자리 잡았다
        1) 1960년대 : 파일 기반 데이터 관리 시대
                    Flowchart를 중심으로 개발 방법을 설계하였으며, 데이터는 주로 파일 구조를 통해 저장하고 관리
                    => 데이터 중복과 일관성 문제 등으로 인해 데이터 관리에 뚜렷한 한계
        2) 1970년대 : DBMS의 초기 등장
                    데이터베이스 관리 기법이 처음으로 등장하면서 본격적인 DBMS 개념이 도입
                    계층형 데이터베이스, 망형 데이터베이스가 상용화 => 데이터의 구조적 관리가 가능
        3) 1980년대 : 관계형 데이터베이스의 상용화
                    관계형 데이터베이스가 상용화되면서 데이터 관리의 새로운 패러다임이 등장
                    데이터를 표(테이블) 형식으로 관리하면, SQL을 기반으로 데이터 처리
                    => Oracle, Sybase, DB2 등
        4) 1990년대 : 관계형 데이터베이스의 확장과 객체 관계형 데이터베이스의 등장
                    RDB가 기장의 주류 => Oracle, Sybase, Informix, DB2, Teradata, SQL Server등 다양한 DBMS 제품 등장
                    객체 지향 프로그래밍의 개념이 통합된 객체 관계형 데이터베이스(ORDB)의 개념이 발전하며 데이터베이스 관리 기술이 더욱 확장

    2. 관계형 데이터베이스 : 관계형 데이터 모델은 데이터를 표(table) 형태로 표현하는 데이터베이스 모델 => 표는 행(row)과 열(column)로 구성, 표들이 서로 관계를 가질 수 있다.
        = 테이블
            => 행과 열의 2차원 구조를 가진 데이터 저장 객체
            => 관계형 데이터베이스의 기본 단위로 릴레이션이라고도 함
        = 칼럼/열
            => 테이블에서 세로 방향으로 이루어진 개별 속성으로, 더 이상 나눌 수 없음
            => 필드라고도 함
        = 로우/행
            => 테이블에서 가로 방향으로 이루어진 연결된 데이터
            => 튜플, 레코드라고도 함

        = 제약 조건
            = 도메인 제약 : 속성에 대한 제약 => 각 속성의 값이 특정 도메인에서 정의된 값이어야 함 => 원자성을 가짐 => 복합 속성, 다중값 속성 (X) / NOT NULL이 아니면 NULL 가능 => 예) '나이'는 정수 => '고려'(X)
            = 키 제약 : 테이블, 즉 릴레이션에 대한 제약 => 릴레이션의 모든 튜플이 서로 고유하게 식별될 수 있도록 보장 => PK가 있어야함
            = 개체 무결성 제약 : 기본 키에 대한 제약 => 기본 키가 반드시 고유한 값을 가지며, NULL 값을 허용하지 않아야 함
            = 참조 무결성 제약 : 외래 키에 대한 제약 => 외래 키의 값은 NULL 값이거나, 해당 외래 키가 참조하는 테이블의 기본 키와 일치해야 함

성능 데이터 모델링
    1. 개념
        = 정의 => 성능 데이터 모델링이란 데이터베이스의 성능을 최적화하기 위해 정규화, 반정규화, 테이블 통합 및 분할, 조인 구조 개선, 기본 키와 외래 키의 적절한 설정 등을 고려하여 데이터 모델링을 수행하는 것을 의미한다
        = 수행시점 => 가능한 빠른 시점에 수행하는 것이 가장 효과적 => 분석 및 설계 단계에서 성능 모델링을 수행하면, 이후 발생할 수 있는 성능 문제를 사전에 예방하고, 재작업으로 인한 비용과 시간을 최소화할 수 있다
                  => 데이터 모델링 설계 후 성능 저하 => 해당 부분만을 SQL 튜닝으로 보완 => 초기 단계부터 성능을 고려한 모델링
    2. 성능 데이터 모델링의 진행 순서
        1) 정규화 수행
            = 데이터 중복 제거와 데이터 무결성 확보를 위해 정규화를 정확히 수행
            = 주요 관심사별로 테이블을 분산시켜 데이터 관리를 체계화함
        2) 데이터베이스 용량 산정
            = 각 엔터티에 저장될 데이터의 양과 크기를 계산함
            = 엔터티별로 처리될 트랜잭션의 양을 파악하여 용량을 예측함
        3) 트랜잭션 유형 분석
            = 데이터베이스에 발생하는 트랜잭션의 유형(CRUD)을 파악함
            = CRUD 매트릭스를 활용해 각 테이블과 트랜잭션 간의관계를 분석함
        4) 반정규화 수행
            = 용량과 트랜잭션 유형을 고려하여 성능을 향상시킬 수 있도록 필요한 부분에 대해 반정규화를 적용함
            = 테이블 병합, 중복 칼럼 추가, 관계 변경 등 반정규화 기법을 사용함
        5) 세부 설계 조정 및 성능 검증
            = 이력 모델의 조정, 인덱스를 고려한 PK/FK의 순서 조정, 슈퍼타입/서브타입 조정 등을 수행함
            = 성능 관점에서 데이터 모델을 최종적으로 검증함

정규화
    1. 개념
        => 데이터베이스 설계에서 정규화가 제대로 이루어지지 않았거나 비효율적인 데이터 구조로 인해 발생하는 문제점
        => 이상 현상은 주로 데이터를 삽입, 삭제, 갱신하는 과정에서 비정상적인 결과나 데이터 불일치를 초래한다. 
