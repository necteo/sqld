데이터 모델링 : 현실 데이터를 단순하고 이해하기 쉽게 표현
            -> 복잡한 현실세계를 추상화, 단순화, 명확화하여 중요한 요소와 관계를 일정한 표기법에 의해 표현하는 것
            
            특징)
                1. 추상화 : 현실의 복잡한 데이터를 주요한 정보만 남기고 표현하는 과정 , 모형화
                           불필요한 정보는 제외하고, 필요한 데이터와 그 관계만 집중적으로 표현함
                2. 단순화 : 복잡한 데이터를 이해하기 쉬운 구조로 표현하는 과정
                3. 명확화 : 데이터의 구조와 관계를 명확하게 표현아형 오해의 여지를 없애는 과정
            -> 올바르게 수행되지 않는 경우 : 중복성 -> 같은 데이터가 여러 곳에 저장되어 관리가 비효율적이고 불일치가 발생할 수 있음
                                         비유연성 -> 데이터 모델링이 변화에 대응하지 못해 시스템 확장이나 수정이 어려움
                                         비일관성 -> 동일한 데이터가 다르게 저장되거나 표현되어 데이터의 신뢰성이 저하됨
            
            관점)
                1. 데이터 관점(What) : 데이터 관점에서 모델링 수행
                                      저장하고 관리해야 하는 데이터 자체제 초점을 맞춘다 -> 데이터와 데이터 간의 관계, 업무와 데이터간 관계
                                      예) 수강 신청 -> 아이디, 학번, 비밀번호 등
                2. 프로세스 관점(How) : 데이터를 어떻게 처리할지에 초점을 맞춘다 -> 업무의 흐름과 절차 중심
                                      예) 수강 신청 -> 아이디/비밀번호 입력 -> 수강 과목 선택 -> 수강 신청서 작성 -> 관리자 승인 -> 학생 수강 정보 저장
                3. 데이터와 프로세스의 상관 관점(Interaction) : 데이터와 프로세스가 서로 밀접하게 연결되어 있다는 점을 강조
                                                            데이터와 프로세스는 상호 의존적인 관계
데이터 모델링의 3단계
            1. 개념적 데이터 모델링 : 현실 세계의 데이터를 추상화하여 개념적 구조를 설계한다
            2. 논리적 데이터 모델링 : 개념적 구조를 바탕으로 논리적 단계와 데이터 속성을 정의하여 논리적 구조를 설계한다
            3. 물리적 데이터 모델링 : 논리적 구조를 기반으로 컴퓨터에서 데이터를 저장할 구체적인 방식, 즉 물리적 구조를 설계한다

            물리적 구조(저장 데이터베이스) + 논리적 구조 => 물리(컴퓨터) 세계
            개념적 구조 + 논리적 구조 => 개념 세계
                        = 개념 세계 : 개념적 구조와 논리적 구조를 포함하면, 사람이 이해할 수 있는 데이터의 논리적 흐름과 관계를 설명
                        = 물리 세계 : 논리적 구조와 물리적 구조를 포함하면, 컴퓨터가 데이터를 저장하고 처리하는 구체적인 방식을 다룬다
            
                                    학계                                    산업계
            개요        개념적/논리적 모델링을 명확히 구분            명확히 구분하지 않음
                        논리적 모델링에서 테이블 도출                물리적 모델링에서 테이블 도출
            개념적            ERD 도출                             핵심 엔터티/관계/속성 중심 ERD 도출
            모델링      관계가 자체 속성을 가질 수 있음              관계가 자체 속성을 가질 수 없음
            
            논리적            테이블 도출                           훨씬 구체적인 수준의 ERD 도출
            모델링           PK, FK 지정                           시스템으로 구축하고자 하는 업무에 대해 식별자, 속성, 관계 등을 명시
                        정규화 및 반정규화 수행                      M:N 관계 해소 => 여러 개의 1:N으로 분해
            
            물리적       실제 DBMS에 맞는 테이블 구축                테이블 도출(PK, FK, 칼럼 정의)
            모델링       데이터 타입 정의, 인덱스 설계, 뷰 설계       정규화 및 반정규화
                                                                   데이터 타입 정의, 인덱스 설계, 뷰 설계

데이터 독립성 : 데이터와 응용 프로그램을 분리하여 설계 및 관리의 효율성을 높이는 것을 목표 => 파일 시스템
            = 파일 시스템 구조와 문제점
                        1) 데이터 중복 관리
                        2) 데이터 불일치 문제
            데이터베이스 시스템 => 데이터의 중복 관리 제거, 일관성 유지, 효율적인 데이터 공유
                        1) 데이터의 통합 관리 => 하나의 데이터베이스에서 통합 관리
                        2) 데이터 공유와 일관성 유지 : 데이터베이스에 저장된 데이터를 여러 프로그램이 공유하여 사용

데이터베이스의 3단계 구조
            = 외부 스키마 : 응용 프로그램이나 사용자 관점에서 데이터를 표현
                        예) '내 급여는 얼마인가?', '부서 간 평균 급여의 차이는?', '입사한 지 10년이 넘은 사원의 리스트는?'
            = 개념 스키마 : 외부 스키마에서 요구된 모든 데이터를 통합하여 설계한 데이터의 논리적 구조 => 데이터 간의 관계
                        예) 데이터 A,B,C / B,C,D / D,E,F => 통합 A,B,C,D,E,F
            = 내부 스키마 : 개념 스키마를 물리적으로 저장 => 데이터가 실제로 저장되는 방식(파일, 인덱스 등)과 최적화된 데이터베이스 구조

데이터의 종속성과 독립성
            = 데이터 종속성 : 응용 프로그램과 데이터 간의 상호 의존 관계 => 주로 파일 시스템에서 발생하는 문제
                        데이터 파일의 구조가 변경되면 해당 응용 프로그램도 이에 따라 수정
            = 데이터 독립성 : 데이터 구조의 변경이 응용 프로그램에 영향을 주지 않는 특성 => 논리적 독립성, 물리적 독립성
                        = 논리적 독립성 : 논리적 사상(외부적/개념적 사상)을 통해 논리적 독립성이 보장
                                    개념 스키마(논리적 구조)가 변경되어도 외부 스키마가 영향을 받지 않음
                        = 물리적 독립성 : 물리적 사상(개념적/내부적 사상)을 통해 물리적 독립성이 보장됨
                                    내부 스키마가 변경되어도 개념 스키마가 영향을 받지 않음
            데이터 독립성이 유지되지 않는 경우
            = 데이터 중복성과 복잡도가 증가 => 동일한 데이터가 여러 프로그램과 파일에서 중복으로 관리 => 데이터 불일치 문제 => 수정이 복잡
            = 요구사항에 대응하는 난이도가 증가 => 유지보수 비용 상승 => 데이터 구조 변경시 모든 프로그램 수정 => 시스템의 유연성과 효율성 저하

데이터 모델링의 요소
            데이터 모델링의 3가지 구성 요소
                        = 엔터티(Entity) : 업무에서 관리해야 할 개체 또는 대상(Thing)
                                    예) 고객, 상품, 주문 등
                        = 속성(Attribute) : 엔터티가 가지는 특성이나 정보
                                    예) 고객의 이름, 연락처, 주소 등
                        = 관계(Relationship) : 엔터티 간의 연결 또는 상호작용
                                    예) 고객이 주문을 한다, 상품이 주문에 포함된다 등

            스키마 vs 인스턴스
                        = 스키마는 데이터베이스의 구조와 설계를 정의한 것 => 테이블, 열, 데이터 타입, 제약 조건 등을 포함 => 청사진(정적인 개념)
                        = 인스턴스는 스키마에 따라 특정 시점에 저장된 실제 데이터 => 데이터베이스의 동적인 상태
                        Section_identifier Course_number Semester Year Instructor <= 스키마
                        85                 MATH2410      FALL     04   King       <= 인스턴스

데이터 모델 표기법 및 ERD 작성 순서
            1. 데이터 모델 표기법
                        = Peter Chen : 대학에서 가장 많이 이용 / 실무에서 거의 사용하지 않음
                        = IE/Crow's Foot : 까마귀발 모양의 표기법 / 실무에서 가장 많이 사용 / tool) ERWin, ERStudio
                        = IDEF1X(Intergration Definition for Information Modeling) : 마름모와 원을 이용한 표기법으로 실무에서 많이 사용함 / tool) ERWin
                        = Min-Max/ISO : 기수성을 좀 더 정교하게 표현한 방법으로 많이 활용되지 않음
                        = UML : 데이터 모델링과 프로세스 모델링을 동시에 다룸 / tool) Rational Rose
                        = Case Method / Barker's Nation : Crow's Foot과 유사, 관계 표기법 등 일부 다름 / tool) DA#

            2. ERD 작성 순서
                        1. 엔터티를 도출하고 그린다 => 관리해야 할 데이터를 정의하기 위해 엔터티를 식별함 / 학생, 강좌, 교수 등의 엔터티 도출함
                        2. 엔터티를 적절하게 배치한다 => 선이 교차하거나 꼬이지 않도록 배치함 / 왼쪽->오른쪽, 위->아래 순으로 읽을 수 있도록 구성함
                        3. 엔터티 간의 관계를 설정한다 => 식별자 관계를 우선 설정함 / Cycle 관계(순환 관계)가 발생하지 않도록 주의함
                        4. 관계명을 서술한다(양 방향) => 관계명은 현재형으로 작성, 지나치게 포괄적인 단어는 피함 / 실제 프로젝트에서는 관계명 자체를 크게 중요하게 다루지 않는 경우도 있음
                        5. 관계 참여도를 표현한다 => 한 개의 엔터티와 다른 엔터티 간 참여하는 관계 수 를 의미함 / 예) 1:1, 1:N, N:M 관계
                        6. 관계의 필수 여부를 확인한다 => 필수 관계와 선택 관계를 명시함

            3. 좋은 데이터 모델의 요건
                        = 완전성(Completeness) : 업무에서 필요로 하는 모든 데이터가 데이터 모델에 정의되어야 함
                        = 업무규칙(Business Rules) : 업무규칙을 반영하기 위해 필요한 데이터가 데이터 모델에 표현되어야 함
                                                예) '사원에는 정규직, 임시직이 있으며, 정규직만 호봉 정보를 가짐'이라는 업무규칙을 반영하기 위해, 데이터 모델에 '사원 구분', '호봉' 등의 속성이 명시되어야 함
                        = 중복배체(Non-Redundancy) : 동일한 사실은 반드시 한 번만 기록
                        = 데이터 재사용(Data Reusability) : 회사 전체 관점에서 공통 데이터를 도출하고, 이를 전 영역에서 사용할 수 있도록 설계해야 함
                        = 통합성(Integration) : 동일한 데이터는 조직의 전체에서 한 번만 정의되고, 이를 여러 다른 영역에서 참조, 활용해야 함

===========================================================================================================================================================================================================

엔터티 : 업무에 필요한 정보를 저장하고 관리하기 위한 집합적인 것(Thing)
            = Peter Chen(1976) : 변별할 수 있는 사물
            = C.J.Date(1986) : 데이터베이스 내에서 변별 가능한 객체
            = James Martin(1989) : 정보를 저장할 수 있는 어떤 것
            = Thomas Bruce(1992) : 정보가 저장될 수 있는 사람, 장소, 물건, 사건, 개념 등

            = 분류
            1) 물리적 형태의 존재 여부에 따른 분류
                        = 유형 엔터티 : 물리적인 형태가 있고 안정적이며 지속적으로 활용됨 / 예) 교수, 강의실, 학생 등
                        = 개념 엔터티 : 물리적인 형태는 존재하지 않으나 관리해야 할 개념적 정보 / 예) 수업, 보험상품 등
                        = 사건 엔터티 : 업무 수행 과정에서 발생하면 비교적 발생량이 많음(각종 통계 분석의 주요 대상이 됨) / 예) 수강신청, 주문, 입금, 로그인 로그 등
            2) 발생시점 및 상속 관계에 따른 분류
                        = 기본 엔터티 : 다른 엔터티로부터 영향을 받지 않고 독립적으로 생성되며, 스스로 주식별자를 갖는 엔터티 / 예) 직원, 고객, 상품, 부서 등
                        = 중심 엔터티 : 기본 엔터티로부터 주식별자를 상속받아 생성되며, 주로 업무의 핵심적인 데이터를 관리하는 엔터티 / 예) 급여, 주문 등
                        = 행위 엔터티 : 특정 사건이나 활동의 결과로 생성되는 데이터 / 두 개 이상의 엔터티(중심 엔터티 또는 기본 엔터티) 간 관계를 통해 데이터가 생성됨 / 예) 주문 내역, 결제 기록, 수강신청 내역 등
